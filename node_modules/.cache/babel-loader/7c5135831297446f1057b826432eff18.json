{"ast":null,"code":"import _regeneratorRuntime from \"/media/shubhamg931/New Volume/Internships/SocialCops/socialcops-assignment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/media/shubhamg931/New Volume/Internships/SocialCops/socialcops-assignment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as Papa from \"papaparse\";\nimport { LOAD_DATA, SHOW_STATS } from './types';\nexport var showStats = function showStats(all) {\n  console.log(\"showStats called\");\n  console.log(all);\n  var hashTeam = all.stats.data.teamArr;\n  var team = [],\n      values = [];\n  var year = all.year.value;\n  var season = all.stats.data.season;\n  var item = all.list.item,\n      k;\n\n  switch (item) {\n    case \"Runs\":\n      console.log(\"RUNS!!!!\");\n      k = 0;\n      season[year - 2008].Runs.map(function (val) {\n        if (val > 0) {\n          team.push(hashTeam[k]);\n          values.push(val);\n        }\n\n        ++k;\n      });\n      break;\n\n    case \"Wickets\":\n      console.log(\"WICKETS!!\");\n      k = 0;\n      season[year - 2008].Wickets.map(function (val) {\n        if (val > 0) {\n          team.push(hashTeam[k]);\n          values.push(val);\n        }\n\n        ++k;\n      });\n      break;\n\n    case \"Batting Leaders\":\n      console.log(\"BATTING LEADERS!!\");\n      break;\n\n    case \"Fours\":\n      console.log(\"FOURS!!\");\n      k = 0;\n      season[year - 2008].Fours.map(function (val) {\n        if (val > 0) {\n          team.push(hashTeam[k]);\n          values.push(val);\n        }\n\n        ++k;\n      });\n      break;\n\n    case \"Sixes\":\n      console.log(\"SIXES!!\");\n      k = 0;\n      season[year - 2008].Sixes.map(function (val) {\n        if (val > 0) {\n          team.push(hashTeam[k]);\n          values.push(val);\n        }\n\n        ++k;\n      });\n      break;\n\n    case \"Bowling leaders\":\n      console.log(\"BOWLING LEADERS!!\");\n      break;\n\n    case \"Maidens\":\n      console.log(\"MAIDENS!!\");\n      break;\n\n    case \"Economy\":\n      console.log(\"ECONOMY!!\");\n      break;\n\n    case \"Extras\":\n      k = 0;\n      season[year - 2008].Extras.map(function (val) {\n        if (val > 0) {\n          team.push(hashTeam[k]);\n          values.push(val);\n        }\n\n        ++k;\n      });\n      console.log(\"EXTRAS!!\");\n      break;\n\n    default:\n      console.log(\"NO MATCHING ITEM!\");\n  }\n\n  var data = {\n    team: team,\n    values: values\n  };\n  return {\n    type: SHOW_STATS,\n    payload: data\n  };\n};\nvar PlayerData, BallByBallData, MatchData, PlayerMatchData, SeasonData, TeamData;\nexport var loadData = function loadData() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var PlayerArray, BallByBallArray, MatchArray, PlayerMatchArray, SeasonArray, TeamArray, teamArr, seasonArr, playerArr, season, number, i, k;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"Player.csv\").then(function (response) {\n                  return response.text();\n                }).then(function (text) {\n                  PlayerData = text; // console.log(text)\n                });\n\n              case 2:\n                _context.next = 4;\n                return fetch(\"Ball_by_Ball.csv\").then(function (response) {\n                  return response.text();\n                }).then(function (text) {\n                  BallByBallData = text; // console.log(text)\n                });\n\n              case 4:\n                _context.next = 6;\n                return fetch(\"Player_Match.csv\").then(function (response) {\n                  return response.text();\n                }).then(function (text) {\n                  PlayerMatchData = text; // console.log(text)\n                });\n\n              case 6:\n                _context.next = 8;\n                return fetch(\"Match.csv\").then(function (response) {\n                  return response.text();\n                }).then(function (text) {\n                  MatchData = text; // console.log(text)\n                });\n\n              case 8:\n                _context.next = 10;\n                return fetch(\"Season.csv\").then(function (response) {\n                  return response.text();\n                }).then(function (text) {\n                  SeasonData = text; // console.log(text)\n                });\n\n              case 10:\n                _context.next = 12;\n                return fetch(\"Team.csv\").then(function (response) {\n                  return response.text();\n                }).then(function (text) {\n                  TeamData = text; // console.log(text)\n                });\n\n              case 12:\n                PlayerArray = [], BallByBallArray = [], MatchArray = [], PlayerMatchArray = [], SeasonArray = [], TeamArray = [];\n                console.log(\"PLAYEDATATYPE: \" + typeof PlayerData);\n                Papa.parse(PlayerData, {\n                  complete: function complete(results) {\n                    // console.log(\"Finished:\", results.data);\n                    PlayerArray = results.data;\n                    console.log(\"entries.length: \" + results.data.length);\n                  }\n                });\n                Papa.parse(BallByBallData, {\n                  complete: function complete(results) {\n                    // console.log(\"Finished:\", results.data);\n                    BallByBallArray = results.data;\n                    console.log(\"entries.length: \" + results.data.length);\n                  }\n                });\n                Papa.parse(MatchData, {\n                  complete: function complete(results) {\n                    // console.log(\"Finished:\", results.data);\n                    MatchArray = results.data;\n                    console.log(\"entries.length: \" + results.data.length);\n                  }\n                });\n                Papa.parse(PlayerMatchData, {\n                  complete: function complete(results) {\n                    // console.log(\"Finished:\", results.data);\n                    PlayerMatchArray = results.data;\n                    console.log(\"entries.length: \" + results.data.length);\n                  }\n                });\n                Papa.parse(SeasonData, {\n                  complete: function complete(results) {\n                    // console.log(\"Finished:\", results.data);\n                    SeasonArray = results.data;\n                    console.log(\"entries.length: \" + results.data.length);\n                  }\n                });\n                Papa.parse(TeamData, {\n                  complete: function complete(results) {\n                    // console.log(\"Finished:\", results.data);\n                    TeamArray = results.data;\n                    console.log(\"entries.length: \" + results.data.length);\n                  }\n                });\n                teamArr = [], seasonArr = [], playerArr = [];\n                TeamArray.map(function (team) {\n                  teamArr[team[0]] = team[1];\n                });\n                SeasonArray.map(function (season) {\n                  seasonArr[season[0]] = season[1];\n                });\n                PlayerArray.map(function (player) {\n                  playerArr[player[0]] = player[1];\n                });\n                season = [];\n\n                for (i = 0; i < 10; ++i) {\n                  season.push({\n                    Runs: new Array(14).fill(0),\n                    Wickets: new Array(14).fill(0),\n                    Fours: new Array(14).fill(0),\n                    Sixes: new Array(14).fill(0),\n                    Extras: new Array(14).fill(0)\n                  });\n                }\n\n                k = 0;\n                BallByBallArray.map(function (val) {\n                  k++;\n\n                  switch (val[0].substr(0, 2)) {\n                    case \"33\":\n                      number = 0; // console.log(\"season 2008\");\n\n                      break;\n\n                    case \"39\":\n                      number = 1; // console.log(\"season 2009\");\n\n                      break;\n\n                    case \"41\":\n                      number = 2; // console.log(\"season 2010\");\n\n                      break;\n\n                    case \"50\":\n                      number = 3; // console.log(\"season 2011\");\n\n                      break;\n\n                    case \"54\":\n                      number = 4; // console.log(\"season 2012\");\n\n                      break;\n\n                    case \"59\":\n                      number = 5; // console.log(\"season 2013\");\n\n                      break;\n\n                    case \"73\" || \"72\":\n                      number = 6; // console.log(\"season 2014\");\n\n                      break;\n\n                    case \"82\":\n                      number = 7; // console.log(\"season 2015\");\n\n                      break;\n\n                    case \"98\":\n                      number = 8; // console.log(\"season 2016\");\n\n                      break;\n\n                    default:\n                      number = -1;\n                    // console.log(\"No match!\");\n                  }\n\n                  if (number >= 0) {\n                    var val4 = parseInt(val[4]),\n                        val5 = parseInt(val[5]),\n                        val10 = parseInt(val[10]),\n                        val12 = parseInt(val[12]),\n                        val13 = parseInt(val[13]);\n                    var runScored = 0;\n\n                    if (!isNaN(val12)) {\n                      if (!isNaN(val10)) runScored = val10 + val12;else runScored = val12;\n                      season[number].Extras[val5] += val12;\n                      season[9].Extras[val5] += val12;\n                    } else {\n                      if (!isNaN(val10)) runScored = val10;\n                    }\n\n                    season[number].Runs[val4] += runScored;\n                    season[9].Runs[val4] += runScored;\n\n                    if (!isNaN(val13)) {\n                      season[number].Wickets[val5]++;\n                      season[9].Wickets[val5]++;\n                    }\n\n                    if (val10 === 4) {\n                      season[number].Fours[val4]++;\n                      season[9].Fours[val4]++;\n                    }\n\n                    if (val10 === 6) {\n                      season[number].Sixes[val4]++;\n                      season[9].Sixes[val4]++;\n                    }\n                  }\n                });\n                dispatch({\n                  type: LOAD_DATA,\n                  payload: {\n                    PlayerArray: PlayerArray,\n                    BallByBallArray: BallByBallArray,\n                    MatchArray: MatchArray,\n                    PlayerMatchArray: PlayerMatchArray,\n                    SeasonArray: SeasonArray,\n                    TeamArray: TeamArray,\n                    season: season,\n                    teamArr: teamArr,\n                    seasonArr: seasonArr,\n                    playerArr: playerArr\n                  }\n                });\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/media/shubhamg931/New Volume/Internships/SocialCops/socialcops-assignment/src/actions/statsActions.js"],"names":["Papa","LOAD_DATA","SHOW_STATS","showStats","all","console","log","hashTeam","stats","data","teamArr","team","values","year","value","season","item","list","k","Runs","map","val","push","Wickets","Fours","Sixes","Extras","type","payload","PlayerData","BallByBallData","MatchData","PlayerMatchData","SeasonData","TeamData","loadData","dispatch","fetch","then","response","text","PlayerArray","BallByBallArray","MatchArray","PlayerMatchArray","SeasonArray","TeamArray","parse","complete","results","length","seasonArr","playerArr","player","i","Array","fill","substr","number","val4","parseInt","val5","val10","val12","val13","runScored","isNaN"],"mappings":"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","sourcesContent":["import * as Papa from \"papaparse\";\nimport { LOAD_DATA, SHOW_STATS } from './types'\n\nexport const showStats = (all) => {\n  console.log(\"showStats called\");\n  console.log(all);\n  let hashTeam = all.stats.data.teamArr;\n  let team = [], values = [];\n  let year = all.year.value;\n  let season = all.stats.data.season;\n  let item = all.list.item,k;\n  switch (item) {\n    case \"Runs\":\n      console.log(\"RUNS!!!!\");\n      k = 0;\n      season[year-2008].Runs.map((val) => {\n        if(val > 0){\n          team.push(hashTeam[k]);\n          values.push(val);\n        }\n        ++k;\n      })\n      break;\n    case \"Wickets\":\n      console.log(\"WICKETS!!\");\n      k = 0;\n      season[year-2008].Wickets.map((val) => {\n        if(val > 0){\n          team.push(hashTeam[k]);\n          values.push(val);\n        }\n        ++k;\n      })\n      break;\n    case \"Batting Leaders\":\n      console.log(\"BATTING LEADERS!!\");\n      break;\n    case \"Fours\":\n      console.log(\"FOURS!!\");\n      k = 0;\n      season[year-2008].Fours.map((val) => {\n        if(val > 0){\n          team.push(hashTeam[k]);\n          values.push(val);\n        }\n        ++k;\n      })\n      break;\n    case \"Sixes\":\n      console.log(\"SIXES!!\");\n      k = 0;\n      season[year-2008].Sixes.map((val) => {\n        if(val > 0){\n          team.push(hashTeam[k]);\n          values.push(val);\n        }\n        ++k;\n      })\n      break;\n    case \"Bowling leaders\":\n      console.log(\"BOWLING LEADERS!!\");\n      break;\n    case \"Maidens\":\n      console.log(\"MAIDENS!!\");\n      break;\n    case \"Economy\":\n      console.log(\"ECONOMY!!\");\n      break;\n    case \"Extras\":\n      k = 0;\n      season[year-2008].Extras.map((val) => {\n        if(val > 0){\n          team.push(hashTeam[k]);\n          values.push(val);\n        }\n        ++k;\n      })\n      console.log(\"EXTRAS!!\");\n      break;\n    default:\n      console.log(\"NO MATCHING ITEM!\");\n  }\n  let data = {team, values};\n  return ({type: SHOW_STATS, payload: data});\n}\n\n\nlet PlayerData, BallByBallData, MatchData, PlayerMatchData, SeasonData, TeamData;\nexport const loadData = () => {\n  return async (dispatch) => {\n\n    await fetch(\"Player.csv\")\n      .then(response => response.text())\n      .then(text => {\n        PlayerData = text;\n        // console.log(text)\n      })\n    await fetch(\"Ball_by_Ball.csv\")\n      .then(response => response.text())\n      .then(text => {\n        BallByBallData = text;\n        // console.log(text)\n      })\n    await fetch(\"Player_Match.csv\")\n      .then(response => response.text())\n      .then(text => {\n        PlayerMatchData = text;\n        // console.log(text)\n      })\n    await fetch(\"Match.csv\")\n      .then(response => response.text())\n      .then(text => {\n        MatchData = text;\n        // console.log(text)\n      })\n    await fetch(\"Season.csv\")\n      .then(response => response.text())\n      .then(text => {\n        SeasonData = text;\n        // console.log(text)\n      })\n    await fetch(\"Team.csv\")\n      .then(response => response.text())\n      .then(text => {\n        TeamData = text;\n        // console.log(text)\n      })\n\n    let PlayerArray = [], BallByBallArray = [], MatchArray = [],\n      PlayerMatchArray = [], SeasonArray = [], TeamArray = [];\n\n    console.log(\"PLAYEDATATYPE: \" + typeof (PlayerData));\n\n    Papa.parse(PlayerData, {\n      complete: function(results) {\n        // console.log(\"Finished:\", results.data);\n        PlayerArray = results.data;\n        console.log(\"entries.length: \" + results.data.length);\n      }\n    });\n    Papa.parse(BallByBallData, {\n      complete: function(results) {\n        // console.log(\"Finished:\", results.data);\n        BallByBallArray = results.data;\n        console.log(\"entries.length: \" + results.data.length);\n      }\n    });\n    Papa.parse(MatchData, {\n      complete: function(results) {\n        // console.log(\"Finished:\", results.data);\n        MatchArray = results.data;\n        console.log(\"entries.length: \" + results.data.length);\n      }\n    });\n    Papa.parse(PlayerMatchData, {\n      complete: function(results) {\n        // console.log(\"Finished:\", results.data);\n        PlayerMatchArray = results.data;\n        console.log(\"entries.length: \" + results.data.length);\n      }\n    });\n    Papa.parse(SeasonData, {\n      complete: function(results) {\n        // console.log(\"Finished:\", results.data);\n        SeasonArray = results.data;\n        console.log(\"entries.length: \" + results.data.length);\n      }\n    });\n    Papa.parse(TeamData, {\n      complete: function(results) {\n        // console.log(\"Finished:\", results.data);\n        TeamArray = results.data;\n        console.log(\"entries.length: \" + results.data.length);\n      }\n    });\n\n    let teamArr = [],seasonArr = [],playerArr = [];\n    TeamArray.map((team) => {\n      teamArr[team[0]] = team[1];\n    })\n    SeasonArray.map((season) => {\n      seasonArr[season[0]] = season[1];\n    })\n    PlayerArray.map((player) => {\n      playerArr[player[0]] = player[1];\n    })\n    let season = [], number;\n    for(let i=0;i<10;++i){\n      season.push({\n        Runs: new Array(14).fill(0),\n        Wickets: new Array(14).fill(0),\n        Fours: new Array(14).fill(0),\n        Sixes: new Array(14).fill(0),\n        Extras: new Array(14).fill(0)\n      });\n    }\n    let k = 0;\n    BallByBallArray.map((val) => {\n      k++;\n      switch (val[0].substr(0,2)) {\n        case \"33\":\n          number = 0;\n          // console.log(\"season 2008\");\n          break;\n        case \"39\":\n          number = 1;\n          // console.log(\"season 2009\");\n          break;\n        case \"41\":\n          number = 2;\n          // console.log(\"season 2010\");\n          break;\n        case \"50\":\n          number = 3;\n          // console.log(\"season 2011\");\n          break;\n        case \"54\":\n          number = 4;\n          // console.log(\"season 2012\");\n          break;\n        case \"59\":\n          number = 5;\n          // console.log(\"season 2013\");\n          break;\n        case \"73\" || \"72\":\n          number = 6;\n          // console.log(\"season 2014\");\n          break;\n        case \"82\":\n          number = 7;\n          // console.log(\"season 2015\");\n          break;\n        case \"98\":\n          number = 8;\n          // console.log(\"season 2016\");\n          break;\n        default:\n          number = -1;\n        // console.log(\"No match!\");\n      }\n\n\n      if(number >= 0) {\n\n        let val4 = parseInt(val[4]), val5 = parseInt(val[5]), val10 = parseInt(val[10]), val12 = parseInt(val[12]), val13 = parseInt(val[13]);\n\n        let runScored = 0;\n        if(!isNaN(val12)){\n          if(!isNaN(val10))\n            runScored = val10 + val12;\n          else\n            runScored = val12;\n          season[number].Extras[val5] += val12;\n          season[9].Extras[val5] += val12;\n        }else{\n          if(!isNaN(val10))\n            runScored = val10;\n        }\n        season[number].Runs[val4] += runScored;\n        season[9].Runs[val4] += runScored;\n        if (!isNaN(val13)) {\n          season[number].Wickets[val5]++;\n          season[9].Wickets[val5]++;\n        }\n        if (val10 === 4) {\n          season[number].Fours[val4]++;\n          season[9].Fours[val4]++;\n        }\n        if (val10 === 6) {\n          season[number].Sixes[val4]++;\n          season[9].Sixes[val4]++;\n        }\n      }\n    });\n    dispatch({type: LOAD_DATA, payload: {PlayerArray, BallByBallArray, MatchArray, PlayerMatchArray, SeasonArray, TeamArray, season, teamArr, seasonArr, playerArr}});\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}